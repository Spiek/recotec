// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protobuffer {

namespace {

const ::google::protobuf::Descriptor* Test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubTest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  Test_descriptor_ = file->message_type(0);
  static const int Test_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, stringtest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, int64test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, testmessage_),
  };
  Test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Test_descriptor_,
      Test::default_instance_,
      Test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Test));
  SubTest_descriptor_ = file->message_type(1);
  static const int SubTest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTest, stringtest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTest, int64test_),
  };
  SubTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubTest_descriptor_,
      SubTest::default_instance_,
      SubTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubTest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Test_descriptor_, &Test::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubTest_descriptor_, &SubTest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  delete Test::default_instance_;
  delete Test_reflection_;
  delete SubTest::default_instance_;
  delete SubTest_reflection_;
}

void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\022\013Protobuffer\"X\n\004Test\022\022\n\nstr"
    "ingTest\030\001 \002(\t\022\021\n\tint64Test\030\002 \002(\003\022)\n\013test"
    "Message\030\003 \002(\0132\024.Protobuffer.SubTest\"0\n\007S"
    "ubTest\022\022\n\nstringTest\030\001 \002(\t\022\021\n\tint64Test\030"
    "\002 \002(\003", 165);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  Test::default_instance_ = new Test();
  SubTest::default_instance_ = new SubTest();
  Test::default_instance_->InitAsDefaultInstance();
  SubTest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Test::kStringTestFieldNumber;
const int Test::kInt64TestFieldNumber;
const int Test::kTestMessageFieldNumber;
#endif  // !_MSC_VER

Test::Test()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuffer.Test)
}

void Test::InitAsDefaultInstance() {
  testmessage_ = const_cast< ::Protobuffer::SubTest*>(&::Protobuffer::SubTest::default_instance());
}

Test::Test(const Test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuffer.Test)
}

void Test::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stringtest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  int64test_ = GOOGLE_LONGLONG(0);
  testmessage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:Protobuffer.Test)
  SharedDtor();
}

void Test::SharedDtor() {
  if (stringtest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stringtest_;
  }
  if (this != default_instance_) {
    delete testmessage_;
  }
}

void Test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test_descriptor_;
}

const Test& Test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

Test* Test::default_instance_ = NULL;

Test* Test::New() const {
  return new Test;
}

void Test::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_stringtest()) {
      if (stringtest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stringtest_->clear();
      }
    }
    int64test_ = GOOGLE_LONGLONG(0);
    if (has_testmessage()) {
      if (testmessage_ != NULL) testmessage_->::Protobuffer::SubTest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuffer.Test)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stringTest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringtest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stringtest().data(), this->stringtest().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stringtest");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_int64Test;
        break;
      }

      // required int64 int64Test = 2;
      case 2: {
        if (tag == 16) {
         parse_int64Test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64test_)));
          set_has_int64test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_testMessage;
        break;
      }

      // required .Protobuffer.SubTest testMessage = 3;
      case 3: {
        if (tag == 26) {
         parse_testMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_testmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuffer.Test)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuffer.Test)
  return false;
#undef DO_
}

void Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuffer.Test)
  // required string stringTest = 1;
  if (has_stringtest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringtest().data(), this->stringtest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringtest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stringtest(), output);
  }

  // required int64 int64Test = 2;
  if (has_int64test()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int64test(), output);
  }

  // required .Protobuffer.SubTest testMessage = 3;
  if (has_testmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->testmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protobuffer.Test)
}

::google::protobuf::uint8* Test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuffer.Test)
  // required string stringTest = 1;
  if (has_stringtest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringtest().data(), this->stringtest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringtest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stringtest(), target);
  }

  // required int64 int64Test = 2;
  if (has_int64test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int64test(), target);
  }

  // required .Protobuffer.SubTest testMessage = 3;
  if (has_testmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->testmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuffer.Test)
  return target;
}

int Test::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stringTest = 1;
    if (has_stringtest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringtest());
    }

    // required int64 int64Test = 2;
    if (has_int64test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64test());
    }

    // required .Protobuffer.SubTest testMessage = 3;
    if (has_testmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->testmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test::MergeFrom(const Test& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stringtest()) {
      set_stringtest(from.stringtest());
    }
    if (from.has_int64test()) {
      set_int64test(from.int64test());
    }
    if (from.has_testmessage()) {
      mutable_testmessage()->::Protobuffer::SubTest::MergeFrom(from.testmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test::CopyFrom(const Test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_testmessage()) {
    if (!this->testmessage().IsInitialized()) return false;
  }
  return true;
}

void Test::Swap(Test* other) {
  if (other != this) {
    std::swap(stringtest_, other->stringtest_);
    std::swap(int64test_, other->int64test_);
    std::swap(testmessage_, other->testmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test_descriptor_;
  metadata.reflection = Test_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubTest::kStringTestFieldNumber;
const int SubTest::kInt64TestFieldNumber;
#endif  // !_MSC_VER

SubTest::SubTest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protobuffer.SubTest)
}

void SubTest::InitAsDefaultInstance() {
}

SubTest::SubTest(const SubTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protobuffer.SubTest)
}

void SubTest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stringtest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  int64test_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubTest::~SubTest() {
  // @@protoc_insertion_point(destructor:Protobuffer.SubTest)
  SharedDtor();
}

void SubTest::SharedDtor() {
  if (stringtest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stringtest_;
  }
  if (this != default_instance_) {
  }
}

void SubTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubTest_descriptor_;
}

const SubTest& SubTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

SubTest* SubTest::default_instance_ = NULL;

SubTest* SubTest::New() const {
  return new SubTest;
}

void SubTest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_stringtest()) {
      if (stringtest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stringtest_->clear();
      }
    }
    int64test_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protobuffer.SubTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stringTest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringtest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stringtest().data(), this->stringtest().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stringtest");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_int64Test;
        break;
      }

      // required int64 int64Test = 2;
      case 2: {
        if (tag == 16) {
         parse_int64Test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64test_)));
          set_has_int64test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protobuffer.SubTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protobuffer.SubTest)
  return false;
#undef DO_
}

void SubTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protobuffer.SubTest)
  // required string stringTest = 1;
  if (has_stringtest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringtest().data(), this->stringtest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringtest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stringtest(), output);
  }

  // required int64 int64Test = 2;
  if (has_int64test()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int64test(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protobuffer.SubTest)
}

::google::protobuf::uint8* SubTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protobuffer.SubTest)
  // required string stringTest = 1;
  if (has_stringtest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringtest().data(), this->stringtest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringtest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stringtest(), target);
  }

  // required int64 int64Test = 2;
  if (has_int64test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int64test(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protobuffer.SubTest)
  return target;
}

int SubTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stringTest = 1;
    if (has_stringtest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringtest());
    }

    // required int64 int64Test = 2;
    if (has_int64test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64test());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubTest::MergeFrom(const SubTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stringtest()) {
      set_stringtest(from.stringtest());
    }
    if (from.has_int64test()) {
      set_int64test(from.int64test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubTest::CopyFrom(const SubTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubTest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SubTest::Swap(SubTest* other) {
  if (other != this) {
    std::swap(stringtest_, other->stringtest_);
    std::swap(int64test_, other->int64test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubTest_descriptor_;
  metadata.reflection = SubTest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuffer

// @@protoc_insertion_point(global_scope)
